#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# michael a.g. aïvázis
# orthologue
# (c) 1998-2017 all rights reserved
#

# externals
import datetime, os, sys

# the location of project configuration files
pdir = os.path.abspath(os.path.join(os.path.dirname(__file__)))
# if it doesn't exist, make it
os.makedirs(pdir, exist_ok=True)

# attempt to
try:
    # access the framework
    import pyre
# if this fails
except ImportError:
    # the resource
    boot = 'pyre-1.0-boot.zip'
    # the local file
    local = os.path.join(pdir, boot)
    # if it not already here
    if not os.path.exists(local):
        # support for URL access
        import urllib.request
        # form the url to the bootstrapper
        url = 'http://pyre.orthologue.com/' + boot
        # show me
        print('downloading {!r}'.format(url))
        # pull the bootstrapper from the web
        with urllib.request.urlopen(url=url) as ins:
            # open the local file
            with open(local, 'wb') as outs:
                # pull the data and write it
                outs.write(ins.read())
    # grab the sys module
    import sys
    # so we can add the bootstrapper to it
    sys.path[1] = local
    # try importing pyre again
    import pyre


# the app
class configure(pyre.application, family='summit.applications.configure'):
    """
    The summit configuration utility
    """

    # user configurable state
    # packages
    hdf5 = pyre.externals.hdf5()
    hdf5.doc = "the HDF5 installation"

    gsl = pyre.externals.gsl()
    gsl.doc = "the GSL installation"

    metis = pyre.externals.metis()
    metis.doc = "the metis installation"

    mpi = pyre.externals.mpi()
    mpi.doc = "the MPI installation"

    parmetis = pyre.externals.parmetis()
    parmetis.doc = "the parmetis installation"

    petsc = pyre.externals.petsc()
    petsc.doc = "the PETSc installation"

    postgres = pyre.externals.postgres()
    postgres.doc = "the client side of postgres"

    python = pyre.externals.python()
    python = pyre.externals.python()
    python.doc = "the python installation"

    vtk = pyre.externals.vtk()
    vtk.doc = "the VTK installation"

    # geography
    config = pyre.properties.path(default=os.path.join(pdir, 'config.def'))
    config.doc = 'the path to the configuration file'


    # behavior
    @pyre.export
    def main(self, *args, **kwds):
        """
        The main entry point
        """
        # display details about the package choices
        self.show()
        # render the configuration in {mm} format
        table = self.render()
        # save the configuration
        self.save(table=table)
        # all done
        return 0


    # implementation
    def render(self, table=None):
        """
        Create a table with the {mm} settings for the given choices of packages
        """
        # initialize
        table = table or {}

        # hdf5
        hdf5 = self.hdf5
        # update the table
        table['HDF5_DIR'] = hdf5.prefix
        table['HDF5_VERSION'] = hdf5.sigver
        table['HDF5_INCDIR'] = hdf5.join(hdf5.incdir)
        table['HDF5_LIBDIR'] = hdf5.join(hdf5.libdir)

        # gsl
        gsl = self.gsl
        # update the table
        table['GSL_DIR'] = gsl.prefix
        table['GSL_VERSION'] = gsl.sigver
        table['GSL_INCDIR'] = gsl.join(gsl.incdir)
        table['GSL_LIBDIR'] = gsl.join(gsl.libdir)

        # metis
        metis = self.metis
        # update the table
        table['METIS_DIR'] = metis.prefix
        table['METIS_VERSION'] = metis.sigver
        table['METIS_INCDIR'] = metis.join(metis.incdir)
        table['METIS_LIBDIR'] = metis.join(metis.libdir)

        # mpi
        mpi = self.mpi
        # update the table
        table['MPI_DIR'] = mpi.prefix
        table['MPI_INCDIR'] = mpi.join(mpi.incdir)
        table['MPI_LIBDIR'] = mpi.join(mpi.libdir)
        table['MPI_EXECUTIVE'] = mpi.launcher
        table['MPI_VERSION'] = mpi.flavor

        # parmetis
        parmetis = self.parmetis
        # update the table
        table['PARMETIS_DIR'] = parmetis.prefix
        table['PARMETIS_VERSION'] = parmetis.sigver
        table['PARMETIS_INCDIR'] = parmetis.join(parmetis.incdir)
        table['PARMETIS_LIBDIR'] = parmetis.join(parmetis.libdir)

        # petsc
        petsc = self.petsc
        # update the table
        table['PETSC_DIR'] = petsc.prefix
        table['PETSC_VERSION'] = petsc.sigver
        table['PETSC_INCDIR'] = petsc.join(petsc.incdir)
        table['PETSC_LIBDIR'] = petsc.join(petsc.libdir)

        # postgres
        postgres = self.postgres
        # update the table
        table['LIBPQ_DIR'] = postgres.prefix
        table['LIBPQ_VERSION'] = postgres.sigver
        table['LIBPQ_INCDIR'] = postgres.join(postgres.incdir)
        table['LIBPQ_LIBDIR'] = postgres.join(postgres.libdir)

        # python
        python = self.python
        # update the table
        table['PYTHON'] = python.interpreter
        table['PYTHON_DIR'] = python.prefix
        table['PYTHON_INCDIR'] = python.join(python.incdir)
        table['PYTHON_LIBDIR'] = python.join(python.libdir)
        table['PYTHON_PYCFLAGS'] = '-b'
        table['PYTHON_LIB'] = python.interpreter

        # vtk
        vtk = self.vtk
        # update the table
        table['VTK_DIR'] = vtk.prefix
        table['VTK_VERSION'] = vtk.sigver
        table['VTK_INCDIR'] = vtk.join(vtk.incdir)
        table['VTK_LIBDIR'] = vtk.join(vtk.libdir)

        # all done
        return table


    def save(self, table):
        """
        Generate the file with the configuration options
        """
        # open the output stream
        stream = self.config.open('w')
        # assemble the document
        doc = '\n'.join(self.assemble(table))
        # print
        print(doc, file=stream)
        # all done
        return table


    def show(self):
        """
        Display details about each package
        """
        # grab a channel
        channel = self.debug
        # if the channel is active
        if channel:
            # sign in
            channel.line("configuration:")
            # show me the mpi settings
            self.mpiDetails(channel=channel)
            # flush
            channel.log()
        # all done
        return


    def mpiDetails(self, channel, **kwds):
        """
        Display details about mpi
        """
        # mpi
        mpi = self.mpi
        # show me
        channel.line("  mpi:")
        channel.line("    package: {}".format(mpi))
        # how did i get this
        channel.line("    chosen: {}".format(mpi.pyre_where()))
        # version info
        channel.line("    version: {.version}".format(mpi))
        channel.line("    prefix: {.prefix}".format(mpi))
        # locations
        channel.line("    tools:")
        channel.line("      path: {}".format(mpi.join(mpi.bindir)))
        channel.line("      launcher: {.launcher}".format(mpi))
        # compile line
        channel.line("    compile:")
        channel.line("      defines: {}".format(mpi.join(mpi.defines)))
        channel.line("      headers: {}".format(mpi.join(mpi.incdir)))
        # link line
        channel.line("    link:")
        channel.line("      paths: {}".format(mpi.join(mpi.libdir)))
        channel.line("      libraries: {}".format(mpi.join(mpi.libraries)))
        # all done
        return 0


    def assemble(self, table):
        """
        Generate the file with the configuration settings
        """
        # build a time stamp
        stamp = datetime.datetime.now().ctime()
        # render a preamble
        yield "# -*- Makefile -*-"
        yield "#"
        yield "# generated by configure on {}".format(stamp)
        yield "#"
        yield ""

        # go through all the variable names
        for key in sorted(table):
            # and print their values
            yield '{} = {}'.format(key, table[key])

        # epilogue
        yield ""
        yield "# end of file"

        # all done
        return

    # pyre framework hooks
    # support for the help system
    def pyre_banner(self):
        """
        Place the application banner in the {info} channel
        """
        # show the license header
        return 'configuration utility'


    # interactive session management
    def pyre_interactiveSessionContext(self, context):
        """
        Go interactive
        """
        # protect against bad contexts
        if context is None:
            # by initializing as an empty dict
            context = {}

        # set up some context
        context['config'] = self

        # and chain up
        return super().pyre_interactiveSessionContext(context=context)


# main
if __name__ == "__main__":
    # make an instance
    app = configure(name='configure')
    # ride
    status = app.run()
    # all done
    raise SystemExit(status)


# end of file
