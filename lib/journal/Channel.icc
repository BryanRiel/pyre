// -*- C++ -*-
// 
// michael a.g. aïvázis
// california institute of technology
// (c) 1998-2011 all rights reserved
// 

#if !defined(pyre_journal_Channel_icc)
#error This header file contains implementation details of class Channel
#else


// accessors
template <bool DefaultState>
typename pyre::journal::Channel<DefaultState>::state_t
pyre::journal::Channel<DefaultState>::
isActive() const
{
    return _inventory.state();
}


template <bool DefaultState>
const typename pyre::journal::Channel<DefaultState>::device_t &
pyre::journal::Channel<DefaultState>::
device() const
{
    return _inventory.device();
}


// mutators
template <bool DefaultState>
void
pyre::journal::Channel<DefaultState>::
activate()
{
    _inventory.activate();
}


template <bool DefaultState>
void
pyre::journal::Channel<DefaultState>::
deactivate()
{
    _inventory.deactivate();
}


template <bool DefaultState>
void
pyre::journal::Channel<DefaultState>::
device(typename Channel::device_t * device)
{
    _inventory.device(device);
}


// destructor
template <bool DefaultState>
pyre::journal::Channel<DefaultState>::
~Channel()
{}


// the default constructor
template <bool DefaultState>
pyre::journal::Channel<DefaultState>::
Channel(typename Channel::inventory_t & inventory) :
    _inventory(inventory)
{}


// the copy constructor
template <bool DefaultState>
pyre::journal::Channel<DefaultState>::
Channel(const pyre::journal::Channel<DefaultState> & other) :
    _inventory(other._inventory)
{}


// operator =
template <bool DefaultState>
const pyre::journal::Channel<DefaultState> &
pyre::journal::Channel<DefaultState>::
operator = (const pyre::journal::Channel<DefaultState> & other)
{
    // skip assignment to self
    if (&other != this) {
        // otherwise, copy the data
        _inventory = other._inventory;
    }
    // and return me
    return *this;
}


# endif

// end of file
