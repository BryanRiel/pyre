// -*- C++ -*-
// 
// michael a.g. aïvázis
// california institute of technology
// (c) 1998-2011 all rights reserved
// 

#if !defined(pyre_journal_State_icc)
#error This header file contains implementation details of class State
#else


// accessors
template <bool Default>
typename pyre::journal::State<Default>::state_t
pyre::journal::State<Default>::
state() const
{
    return _state;
}


template <bool Default>
const typename pyre::journal::State<Default>::device_t &
pyre::journal::State<Default>::
device() const
{
    return *_device;
}


// mutators
template <bool Default>
void
pyre::journal::State<Default>::
activate()
{
    _state = true;
}


template <bool Default>
void
pyre::journal::State<Default>::
deactivate()
{
    _state = false;
}


template <bool Default>
void
pyre::journal::State<Default>::
device(State::device_t * device)
{
    _device = device;
}


// destructor
template <bool Default>
pyre::journal::State<Default>::
~State()
{}


// the default constructor
template <bool Default>
pyre::journal::State<Default>::
State(State::state_t state, State::device_t * device) :
    _state(state),
    _device(device)
{}


// the copy constructor
template <bool Default>
pyre::journal::State<Default>::
State(const pyre::journal::State<Default> & other) :
    _state(other._state),
    _device(other._device)
{}


// operator =
template <bool Default>
const pyre::journal::State<Default> &
pyre::journal::State<Default>::
operator = (const pyre::journal::State<Default> & other)
{
    // skip assignment to self
    if (&other == this) { return *this; }
    // otherwise, copy the data
    _state = other._state;
    _device = other._device;
    // and return me
    return *this;
}


# endif

// end of file
