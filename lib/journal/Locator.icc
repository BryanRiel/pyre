// -*- C++ -*-
// 
// michael a.g. aïvázis
// california institute of technology
// (c) 1998-2011 all rights reserved
// 

#if !defined(pyre_journal_Locator_icc)
#error This header file contains implementation details of class Locator
#else


// interface
template <typename Channel>
inline
pyre::journal::Diagnostic<Channel> &
pyre::journal::Locator::
inject(pyre::journal::Diagnostic<Channel> & channel) const
{
    // convert the line number into a string
    std::stringstream tmp;
    tmp << _line;
    // decorate
    channel.setattr("file", _file);
    channel.setattr("line", tmp.str());
    channel.setattr("function", _function);
    // and return the channel
    return channel;
}


// meta methods
// desturctor
pyre::journal::Locator::
~Locator()
{}


// constructor
pyre::journal::Locator::
Locator(const char * file, int line, const char * function) :
    pyre::journal::Manipulator<Locator>(),
    _file(file),
    _line(line),
    _function(function)
{}


// copy constructor
pyre::journal::Locator::
Locator(const Locator & other) :
    pyre::journal::Manipulator<Locator>(other),
    _file(other._file),
    _line(other._line),
    _function(other._function)
{}


// operator =
pyre::journal::Locator &
pyre::journal::Locator::
operator = (const Locator & other) {
    // skip assignment to self
    if (&other != this) {
        // copy the data
        Manipulator<Locator>::operator=(other);
        _file = other._file;
        _line = other._line;
        _function = other._function;
    }
    // return me
    return *this;
}

# endif

// end of file
