// -*- C++ -*-
// -*- coding: utf-8 -*-
//
// michael a.g. aïvázis
// orthologue
// (c) 1998-2016 all rights reserved
//

// code guard
#if !defined(pyre_memory_Direct_icc)
#error This header file contains implementation details of class pyre::memory::Direct
#endif


// meta-methods
pyre::memory::Direct::
Direct() :
    _buffer {0},
    _size {0}
{}

pyre::memory::Direct::
Direct(uri_type name, bool writable, size_type size, offset_type offset) :
    _buffer {map(name, size, offset, writable)},
    _size {size}
{}


pyre::memory::Direct::
Direct(Direct && other) :
    _buffer {0},
    _size {0}
{
    // delegate to the move assignment operator
    *this = std::move(other);
}

pyre::memory::Direct &
pyre::memory::Direct::
operator=(Direct && other) {
    // trap assignment to self
    if (this == &other) {
        // and bail
        return *this;
    }
    // if my current buffer is valid
    if (_buffer) {
        // unmap the memory
        unmap(_buffer, _size);
    }
    // pilfer
    _buffer = other._buffer;
    _size = other._size;
    // invalidate the state of the source
    other._buffer = 0;
    other._size = 0;
    // make me available
    return *this;
}

pyre::memory::Direct::
~Direct() {
    // if i am holding a valid region
    if (_buffer) {
        // unmap the memory
        unmap(_buffer, _size);
    }
}


// interface
// accessors
pyre::memory::Direct::size_type
pyre::memory::Direct::
size() const {
    // easy enough
    return _size;
}

void *
pyre::memory::Direct::
buffer() const {
    // easy enough
    return _buffer;
}

// end of file
