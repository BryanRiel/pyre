// -*- C++ -*-
// -*- coding: utf-8 -*-
//
// michael a.g. aïvázis
// orthologue
// (c) 1998-2016 all rights reserved
//

// code guard
#if !defined(pyre_geometry_Order_icc)
#error This header file contains implementation details of class pyre::geometry::Order
#endif


// meta-methods
template <typename repT> template <typename... argT>
pyre::geometry::Order<repT>::
Order(argT... value) :
    _order{value...}
{}


// interface
// factory of a c-like ordering where the last index varies the fastest
template <typename repT>
constexpr auto
pyre::geometry::Order<repT>::
rowMajor() {
    // make an empty one
    repT order {};
    // go through its slots
    for (size_t slot=0; slot < order.size(); ++slot) {
        // and fill with consecutive decreasing integers
        order[slot] = order.size() - 1 - slot;
    }
    // all done
    return order;
}

// factory of a fortran-like ordering where the first index varies the fastest
template <typename repT>
constexpr auto
pyre::geometry::Order<repT>::
columnMajor() {
    // make an empty one
    repT order{};
    // go through its slots
    for (size_t slot=0; slot < order.size(); ++slot) {
        // and fill with consecutive decreasing integers
        order[slot] = slot;
    }
    // all done
    return order;
}

// dimensionality of the index
template <typename repT>
constexpr auto
pyre::geometry::Order<repT>::
size() const {
    // easy enough
    return _order.size();
}

template <typename repT>
auto
pyre::geometry::Order<repT>::
operator[] (size_type item) const {
    // bounds check
#if defined(DEBUG_CHECK_BOUNDS)
    if (item >= size()) {
        // open a channel
        pyre::journal::firewall_t firewall("pyre.geometry.bounds");
        // complain
        firewall
            << pyre::journal::at(__HERE__)
            << "index error: out of range: " << item << " > " << size()-1
            << pyre::journal::endl;

    }
#endif
    // look up the item value and return it
    return _order[item];
}

// loops
template <typename repT>
auto
pyre::geometry::Order<repT>::
begin() const {
    // the array itself is the beginning
    return _order.cbegin();
}


template <typename repT>
auto
pyre::geometry::Order<repT>::
end() const {
    // compute the element "one past the end"
    return _order.cend();
}


template <typename repT>
auto &
operator<<(std::ostream & stream, const pyre::geometry::Order<repT> & order) {
    // initialize; do it in this scope scope so we can use the iterator after the loop
    auto v = order.begin();
    // inject up to the last coordinate
    for (; v != order.end()-1; ++v) {
        stream << *v << ", ";
    }
    // and now the last one
    stream << *v;
    // all done
    return stream;
}


// end of file
