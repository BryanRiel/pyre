// -*- C++ -*-
// -*- coding: utf-8 -*-
//
// michael a.g. aïvázis
// california institute of technology
// (c) 1998-2011 all rights reserved
//

#if !defined(pyre_algebra_BCD_icc)
#error This header file contains implementation details of the class BCD
#else


// conversion to double
template <size_t scale, typename precision_t>
pyre::algebra::BCD<scale, precision_t>::operator double() const {
    return _msw + static_cast<double>(_lsw)/scale;
}


// constructor
template <size_t scale, typename precision_t>
pyre::algebra::BCD<scale, precision_t>::BCD(
    precision_t msw,
    precision_t lsw
    ) : _msw(msw), _lsw(lsw) 
{}


// copy constructor
template <size_t scale, typename precision_t>
pyre::algebra::BCD<scale, precision_t>::BCD(
    const BCD<scale, precision_t> & other
    )
{
    (*this) = other;
}


// operator=
template <size_t scale, typename precision_t>
const pyre::algebra::BCD<scale, precision_t> & 
pyre::algebra::BCD<scale, precision_t>::operator= (
    const pyre::algebra::BCD<scale, precision_t> & other
    )
{
    // skip assignment to self
    if (this == &other) { return *this; }
    // otherwise, move the data
    _msw = other._msw;
    _lsw = other._lsw;

    return *this;
}
                                                                   

// destructor
template <size_t scale, typename precision_t>
pyre::algebra::BCD<scale, precision_t>::~BCD()
{}

#endif


// end of file
