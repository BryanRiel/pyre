# -*- coding: utf-8 -*-
#
# michael a.g. aïvázis
# orthologue
# (c) 1998-2013 all rights reserved
#


# externals
import weakref
import collections


# class declaration
class Registrar:
    """
    The manager of protocols, component classes and their instances

    All user defined protocols and components are registered with {Registrar} as they
    are encountered by the framework. Clients can discover the protocol and component classes
    that are registered, the set of instances of any component, as well as the components that
    implement a particular protocol.

    The two base classes {pyre.components.Protocol} and {pyre.components.Component}, as well
    as the protocol specifications autogenerated by {Role}, are declared with the special
    attribute {internal} set to {True} and they are not registered.
    """


    # public data
    protocols = None # the set of known protocols
    components = None # the map of component classes to their instances
    implementors = None # a map of protocols to component classes that implements them


    # interface
    def registerProtocolClass(self, protocol):
        """
        Register the {protocol} class record
        """
        # add to the pile
        self.protocols.add(protocol)
        # and hand the protocol back to the caller
        return protocol


    def registerComponentClass(self, component):
        """
        Register the {component} class record
        """
        # prime the map of components to their instances
        self.components[component] = weakref.WeakSet()
        # update the map of protocols it implements
        for protocol in self.findRegisteredProtocols(component):
            # by registering this component as an implementor
            self.implementors[protocol].add(component)
        # and hand the component back to the caller
        return component


    def registerComponentInstance(self, instance):
        """
        Register this component instance
        """
        # add this instance to the set of instances of its class
        self.components[type(instance)].add(instance)
        # and return it
        return instance


    # implementation details
    def findRegisteredProtocols(self, component):
        """
        Build a sequence of the registered protocols that are implemented by this component
        """
        # get the interface implementation specification
        implements = component.pyre_implements
        # if there aren't any, bail out
        if implements is None: return
        # otherwise, loop over the protocol mro
        for protocol in implements.__mro__:
            # ignore the trivial ones by checking with the registry
            if protocol in self.protocols:
                # before sending it out
                yield protocol
        # all done
        return


    def retrieveComponentByName(self, componentClass, name):
        """
        Look through the registered instances of {componentClass} for one with the given {name}
        """
        # go through the pile
        for instance in self.components[componentClass]:
            # return the instance whose the name matches the given one
            if instance.pyre_name == name:  return instance
        # otherwise, no match
        return None


    # meta-methods
    def __init__(self, **kwds):
        super().__init__(**kwds)
        # map: components -> their instances
        self.components = {}
        # the known interfaces
        self.protocols = set()
        # map: protocols -> components that implement them
        self.implementors = collections.defaultdict(set)
        # all done
        return


# end of file 
