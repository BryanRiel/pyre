# -*- coding: utf-8 -*-
#
# michael a.g. aïvázis
# california institute of technology
# (c) 1998-2013 all rights reserved
#


import collections


class PathHash:
    """
    Implementation of a hash function for hierarchical namespaces with aliased entries.

    PathHash encodes the hierarchical relationships among its contents by having each node in
    the hierarchy store the names of the nodes that are its immediate children. Aliases are
    permitted and they hash to the same key as the original entry.

    PathHash does not provide storage for any values associated with the names of the various
    levels in the hierarchy; that's the responsibility of the client. One implementation
    strategy is to create a dictionary at the client side that maps the keys generated by
    PathHash to the associated values.
    """


    def hash(self, items):
        """
        Hash {item}, assumed to be an iterable of address segments, and return its key
        """
        # starting with me
        node = self
        # go through the entries in {items}
        for part in items:
            # find the right spot
            node = node[part]
        # and return it
        return node


    def alias(self, target, alias):
        """
        Make the node {target} accessible under the name {alias}
        """
        # save the current hash key of {alias}
        original = self[alias]
        # establish the alias by replacing it with the new {target} node
        self[alias] = target
        # and return the original key
        return original


    def dump(self, graphic=''):
        """
        Dump out the names of all encountered nodes
        """
        for name, node in self.nodes.items():
            print("{}{!r}".format(graphic, name))
            node.dump(graphic=graphic+"  ")
        return


    # meta methods
    def __init__(self):
        self.nodes = collections.defaultdict(PathHash)
        return


    def __getitem__(self, key):
        """
        Hash {key}
        """
        # easy enough
        return self.nodes[key]


    def __setitem__(self, name, key):
        """
        Make {name} hash to {key}
        """
        # easy enough
        self.nodes[name] = key
        # all done
        return


    __slots__ = ["nodes"]


# end of file 
