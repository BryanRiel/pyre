# -*- Python -*-
# -*- coding: utf-8 -*-
#
# michael a.g. aïvázis
# orthologue
# (c) 1998-2015 all rights reserved
#


"""
merlin is a package intended as a replacement to {make}
"""


def main():
    """
    This is the main entry point in the package. It is invoked by the {merlin} script.  Its job
    is to boot pyre, examine the command line to deduce which actor the user would like to
    invoke, instantiate it, and call its main entry point with the supplied command line
    arguments.

    There are other possible ways to invoke merlin. See the package documentation.
    """
    # let the plexus do its thing
    return merlin.run()


# administrative
def credits():
    """
    Print the acknowledgments
    """
    # generate the message
    print(_merlin_acknowledgments)
    # all done
    return


def copyright():
    """
    Return the merlin copyright note
    """
    # generate the message
    print(_merlin_copyright)
    # all done
    return


def license():
    """
    Print the merlin license
    """
    # generate the message
    print(_merlin_license)
    # all done
    return


def version():
    """
    Return the merlin version
    """
    # generate the message
    print(_merlin_version)
    # all done
    return


# the actual text
# NYI: add localized versions of all this
_merlin_version = (1, 0, BZR_REVNO)

_merlin_date = "DATE_COMPILED"

_merlin_tag = "merlin {}.{} revision {}".format(*_merlin_version)

_merlin_copyright = "{}: Copyright (c) 1998-2015 Michael A.G. Aïvázis".format(_merlin_tag)

_merlin_header = """
    {}
    Copyright (c) 1998-2015 Michael A.G. Aïvázis
    All rights reserved
    """.format(_merlin_tag)


_merlin_usage = _merlin_header + """
    Basic commands:
        merlin init           make this directory the root of a project
        merlin status         print a summary of the state of a build target
        merlin add            add files or directories to the build system
        merlin build          build a target

        merlin help <topic>   detailed help on topic
        merlin help commands  list all the available commands
        merlin help topics    list all available help topics

        merlin license        terms of use

    Visit http://merlin.orthologue.com for the latest documentation
    """


_merlin_license = _merlin_header + """
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the
      distribution.

    * Neither the name merlin nor the names of its contributors may be
      used to endorse or promote products derived from this software
      without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
    """

_merlin_acknowledgments = _merlin_header + """
    """

# bootstrapping
def boot():
    # check whether
    try:
        # the user
        import __main__
        # has indicated we should skip booting
        if __main__.merlin_noboot:
            # in which case, do not build a plexus
            return None
    # if anything goes wrong
    except:
        # just ignore it and carry on
        pass

    # package registration
    import pyre
    # register the package
    global package
    package = pyre.executive.registerPackage(name='merlin', file=__file__)
    # attach the geography
    global home, prefix, defaults
    home, prefix, defaults = package.layout()

    # externals
    import weakref
    # access the plexus factory
    from .components import merlin
    # build one and return it
    plexus = merlin(name='merlin.plexus')

    # get the dashboard
    from .components import dashboard
    # attach the singletons
    dashboard.merlin = weakref.proxy(plexus)

    # all done
    return plexus


# the framework entities
from pyre import foundry, export, properties, protocol
from .components import component, action, spell


# convenience
def error(message):
    """
    Generate an error message
    """
    # get the logging mechanism
    import journal
    # build an error message object in my namespace
    error = journal.error('merlin')
    # log and return
    return error.log(message)

def warning(message):
    """
    Generate a warning
    """
    # get the logging mechanism
    import journal
    # build a warning object in my namespace
    warning = journal.warning('merlin')
    # log and return
    return warning.log(message)

def info(message):
    """
    Generate an informational message
    """
    # get the logging mechanism
    import journal
    # build an informational message object in my namespace
    info = journal.info('merlin')
    # log and return
    return info.log(message)


# the package
package = None
# geography
# the directory of the package
home = None
# the pathname of the installation
prefix = None
# the directory with the system defaults
defaults = None
# the singleton
merlin = boot()

# end of file
